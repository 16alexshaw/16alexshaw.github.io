[{"title":"MYBATIS basic operation","date":"2018-01-23T01:43:16.000Z","path":"2018/01/23/MYBATIS-basic-operation/","text":"MyBatis is an open source, lightweight, persistence framework. It automates the mapping between SQL databases and objects in Java. The mappings are decoupled from the application logic by packaging the SQL statements in XML configuration files. configure the details of the database123456789101112131415161718192021222324&lt;?xml version = &quot;1.0&quot; encoding = &quot;UTF-8&quot;?&gt;&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt; &lt;environments default = &quot;development&quot;&gt; &lt;environment id = &quot;development&quot;&gt; &lt;transactionManager type = &quot;JDBC&quot;/&gt; &lt;dataSource type = &quot;POOLED&quot;&gt; &lt;property name = &quot;driver&quot; value = &quot;com.mysql.jdbc.Driver&quot;/&gt; &lt;property name = &quot;url&quot; value = &quot;jdbc:mysql://localhost:3306/details&quot;/&gt; &lt;property name = &quot;username&quot; value = &quot;root&quot;/&gt; &lt;property name = &quot;password&quot; value = &quot;password&quot;/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;mappers&gt; &lt;mapper resource = &quot;mybatis/Student.xml&quot;/&gt; &lt;/mappers&gt; &lt;/configuration&gt; The POJO class12345678910public class Student &#123; private int id; private String name; private String branch; private int percentage; private int phone; private String email; //Setters and getters &#125; Mapped StatementsMapped SQL statements are resided within the element named . This element contains an attribute called ‘namespace’: 123&lt;mapper namespace = &quot;Student&quot;&gt; //mapped statements and result maps&lt;mapper&gt; id is unique identifier used to identify the insert statement. On the other hand, parametertype is the class name or the alias of the parameter that will be passed into the statement: 123456789101112&lt;insert id = &quot;insert&quot; parameterType = &quot;Student&quot;&gt; INSERT INTO STUDENT1 (NAME, BRANCH, PERCENTAGE, PHONE, EMAIL ) VALUES (#&#123;name&#125;, #&#123;branch&#125;, #&#123;percentage&#125;, #&#123;phone&#125;, #&#123;email&#125;); &lt;/insert&gt;&lt;update id = &quot;update&quot; parameterType = &quot;Student&quot;&gt; UPDATE STUDENT SET EMAIL = #&#123;email&#125;, NAME = #&#123;name&#125;, BRANCH = #&#123;branch&#125;, PERCENTAGE = #&#123;percentage&#125;, PHONE = #&#123;phone&#125; WHERE ID = #&#123;id&#125;;&lt;/update&gt;&lt;delete id = &quot;deleteById&quot; parameterType = &quot;int&quot;&gt; DELETE from STUDENT WHERE ID = #&#123;id&#125;;&lt;/delete&gt; invoke the ‘insert’ mapped query: 1234//Assume session is an SqlSession object. session.insert(&quot;Student.insert&quot;, student);session.update(&quot;Student.update&quot;,student);session.delete(&quot;Student.deleteById&quot;, 18); resultMapsmaps the results of the select queries to the Student class 12345678910111213141516&lt;resultMap id = &quot;result&quot; type = &quot;Student&quot;&gt; &lt;result property = &quot;id&quot; column = &quot;ID&quot;/&gt; &lt;result property = &quot;name&quot; column = &quot;NAME&quot;/&gt; &lt;result property = &quot;branch&quot; column = &quot;BRANCH&quot;/&gt; &lt;result property = &quot;percentage&quot; column = &quot;PERCENTAGE&quot;/&gt; &lt;result property = &quot;phone&quot; column = &quot;PHONE&quot;/&gt; &lt;result property = &quot;email&quot; column = &quot;EMAIL&quot;/&gt;&lt;/resultMap&gt;&lt;select id = &quot;getAll&quot; resultMap = &quot;result&quot;&gt; SELECT * FROM STUDENT; &lt;/select&gt;&lt;select id = &quot;getById&quot; parameterType = &quot;int&quot; resultMap = &quot;result&quot;&gt; SELECT * FROM STUDENT WHERE ID = #&#123;id&#125;;&lt;/select&gt; The method returns the data of the selected record in the form of List: 1List&lt;Student&gt; list = session.selectList(&quot;Student.getAll&quot;);","tags":[{"name":"MYBATIS","slug":"MYBATIS","permalink":"http://yoursite.com/tags/MYBATIS/"}]},{"title":"MYBATIS Dynamic SQL","date":"2018-01-23T01:41:51.000Z","path":"2018/01/23/MYBATIS-Dynamic-SQL/","text":"MYBATIS Dynamic SQLDynamic SQL is a very powerful feature of MyBatis. It enables to build queries based on the scenario dynamically. if choose (when, otherwise) trim (where, set) foreachThe if StatementThis statement provides an optional text search type of functionality. 1234567891011&lt;select id = &quot;getRecByName_Id&quot; parameterType = &quot;Student&quot; resultType = &quot;Student&quot;&gt; SELECT * FROM STUDENT &lt;if test = &quot;name != null&quot;&gt; WHERE name LIKE #&#123;name&#125; &lt;/if&gt; &lt;if test = &quot;id != null&quot;&gt; AND id LIKE #&#123;id&#125; &lt;/if&gt; &lt;/select&gt; The choose, when, and otherwise Statementsa choose element, which is similar to Java’s switch statement. 1234567891011121314&lt;select id = &quot;getName_Id_phone&quot; parameterType = &quot;Student&quot; resultType = &quot;Student&quot;&gt; SELECT * FROM STUDENT &lt;where&gt; &lt;if test = &quot;id != null&quot;&gt; id = #&#123;id&#125; &lt;/if&gt; &lt;if test = &quot;name != null&quot;&gt; AND name LIKE #&#123;name&#125; &lt;/if&gt; &lt;/where&gt; &lt;/select&gt; The foreach Statementforeach element allows you to specify a collection and declare item and index variables that can be used inside the body of the element 1234567891011&lt;select id = &quot;selectPostIn&quot; resultType = &quot;domain.blog.Post&quot;&gt; SELECT * FROM POST P WHERE ID in &lt;foreach item = &quot;item&quot; index = &quot;index&quot; collection = &quot;list&quot; open = &quot;(&quot; separator = &quot;,&quot; close = &quot;)&quot;&gt; #&#123;item&#125; &lt;/foreach&gt; &lt;/select&gt;","tags":[{"name":"MYBATIS","slug":"MYBATIS","permalink":"http://yoursite.com/tags/MYBATIS/"}]},{"title":"SSM 类别增加","date":"2018-01-23T01:40:09.316Z","path":"2018/01/23/SSM-类别增加/","text":"页面中的增加分类部分1234567891011121314151617181920212223&lt;div class=&quot;panel panel-warning addDiv&quot;&gt; &lt;div class=&quot;panel-heading&quot;&gt;新增分类&lt;/div&gt; &lt;div class=&quot;panel-body&quot;&gt; &lt;form method=&quot;post&quot; id=&quot;addForm&quot; action=&quot;admin_category_add&quot; enctype=&quot;multipart/form-data&quot;&gt; &lt;table class=&quot;addTable&quot;&gt; &lt;tr&gt; &lt;td&gt;分类名称&lt;/td&gt; &lt;td&gt;&lt;input id=&quot;name&quot; name=&quot;name&quot; type=&quot;text&quot; class=&quot;form-control&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;分类圖片&lt;/td&gt; &lt;td&gt; &lt;input id=&quot;categoryPic&quot; accept=&quot;image/*&quot; type=&quot;file&quot; name=&quot;image&quot; /&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr class=&quot;submitTR&quot;&gt; &lt;td colspan=&quot;2&quot; align=&quot;center&quot;&gt; &lt;button type=&quot;submit&quot; class=&quot;btn btn-success&quot;&gt;提 交&lt;/button&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/form&gt; &lt;/div&gt; 为空判断12345678910111213&lt;script&gt;$(function()&#123; $(&quot;#addForm&quot;).submit(function()&#123; if(!checkEmpty(&quot;name&quot;,&quot;分类名称&quot;)) return false; if(!checkEmpty(&quot;categoryPic&quot;,&quot;分类图片&quot;)) return false; return true; &#125;);&#125;); &lt;/script&gt; 在CategoryMapper.xml中新增加 插入分类的SQL语句需要加上2个属性：keyProperty=”id” useGeneratedKeys=”true” 以确保Category对象通过mybatis增加到数据库之后得到的id增长值会被设置在Category对象上。 因为在保存分类图片的时候需要用到这个id值，所以这一步是必须的。 1234567891011121314151617181920&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.how2java.tmall.mapper.CategoryMapper&quot;&gt; &lt;select id=&quot;list&quot; resultType=&quot;Category&quot;&gt; select * from category order by id desc &lt;if test=&quot;start!=null and count!=null&quot;&gt; limit #&#123;start&#125;,#&#123;count&#125; &lt;/if&gt; &lt;/select&gt; &lt;select id=&quot;total&quot; resultType=&quot;int&quot;&gt; select count(*) from category &lt;/select&gt; &lt;insert id=&quot;add&quot; keyProperty=&quot;id&quot; useGeneratedKeys=&quot;true&quot; parameterType=&quot;Category&quot; &gt; insert into category ( name ) values (#&#123;name&#125;) &lt;/insert&gt;&lt;/mapper&gt; 在CategoryMapper中新增add方法123456789import java.util.List; public interface CategoryMapper &#123; List&lt;Category&gt; list(Page page); int total(); void add(Category category);&#125; CategoryService123456789import java.util.List; public interface CategoryService&#123; int total(); List&lt;Category&gt; list(Page page); void add(Category category); &#125; CategoryServiceImpl12345678910111213141516171819202122import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.List;@Servicepublic class CategoryServiceImpl implements CategoryService &#123; @Autowired CategoryMapper categoryMapper; @Override public List&lt;Category&gt; list(Page page) &#123; return categoryMapper.list(page); &#125; @Override public int total() &#123; return categoryMapper.total(); &#125; @Override public void add(Category category) &#123; categoryMapper.add(category); &#125;&#125; 新增UploadedImageFile ，其中有一个MultipartFile 类型的属性，用于接受上传文件的注入属性名称image必须和页面中的增加分类部分中的type=”file”的name值保持一致 1234567891011121314import org.springframework.web.multipart.MultipartFile; public class UploadedImageFile &#123; MultipartFile image; public MultipartFile getImage() &#123; return image; &#125; public void setImage(MultipartFile image) &#123; this.image = image; &#125; &#125; ImageUtil 工具类 change2jpg 确保图片文件的二进制格式是jpg。 resizeImage用于改变图片大小，在上传产品图片的时候会用到。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566import java.awt.Image;import java.awt.Toolkit;import java.awt.image.BufferedImage;import java.awt.image.ColorModel;import java.awt.image.DataBuffer;import java.awt.image.DataBufferInt;import java.awt.image.DirectColorModel;import java.awt.image.PixelGrabber;import java.awt.image.Raster;import java.awt.image.RenderedImage;import java.awt.image.WritableRaster;import java.io.File;import java.io.IOException; import javax.imageio.ImageIO; public class ImageUtil &#123; public static BufferedImage change2jpg(File f) &#123; try &#123; Image i = Toolkit.getDefaultToolkit().createImage(f.getAbsolutePath()); PixelGrabber pg = new PixelGrabber(i, 0, 0, -1, -1, true); pg.grabPixels(); int width = pg.getWidth(), height = pg.getHeight(); final int[] RGB_MASKS = &#123; 0xFF0000, 0xFF00, 0xFF &#125;; final ColorModel RGB_OPAQUE = new DirectColorModel(32, RGB_MASKS[0], RGB_MASKS[1], RGB_MASKS[2]); DataBuffer buffer = new DataBufferInt((int[]) pg.getPixels(), pg.getWidth() * pg.getHeight()); WritableRaster raster = Raster.createPackedRaster(buffer, width, height, width, RGB_MASKS, null); BufferedImage img = new BufferedImage(RGB_OPAQUE, raster, false, null); return img; &#125; catch (InterruptedException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); return null; &#125; &#125; public static void resizeImage(File srcFile, int width,int height, File destFile) &#123; try &#123; if(!destFile.getParentFile().exists()) destFile.getParentFile().mkdirs(); Image i = ImageIO.read(srcFile); i = resizeImage(i, width, height); ImageIO.write((RenderedImage) i, &quot;jpg&quot;, destFile); &#125; catch (IOException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125; public static Image resizeImage(Image srcImage, int width, int height) &#123; try &#123; BufferedImage buffImg = null; buffImg = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB); buffImg.getGraphics().drawImage(srcImage.getScaledInstance(width, height, Image.SCALE_SMOOTH), 0, 0, null); return buffImg; &#125; catch (Exception e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; return null; &#125; &#125; CategoryController新增add方法 add方法映射路径admin_category_add的访问 通过categoryService保存c对象 通过session获取ControllerContext,再通过getRealPath定位存放分类图片的路径。如果严格按照本教程的做法，使用idea中的tomcat部署的话，那么图片就会存放在:E:\\project\\tmall_ssm\\target\\tmall_ssm\\img\\category 这里 根据分类id创建文件名 如果/img/category目录不存在，则创建该目录，否则后续保存浏览器传过来图片，会提示无法保存 通过UploadedImageFile 把浏览器传递过来的图片保存在上述指定的位置 通过ImageUtil.change2jpg(file); 确保图片格式一定是jpg，而不仅仅是后缀名是jpg. 客户端跳转到admin_category_list 123456789101112@RequestMapping(&quot;admin_category_add&quot;)public String add(Category c, HttpSession session, UploadedImageFile uploadedImageFile) throws IOException &#123; categoryService.add(c); File imageFolder= new File(session.getServletContext().getRealPath(&quot;img/category&quot;)); File file = new File(imageFolder,c.getId()+&quot;.jpg&quot;); if(!file.getParentFile().exists()) file.getParentFile().mkdirs(); uploadedImageFile.getImage().transferTo(file); BufferedImage img = ImageUtil.change2jpg(file); ImageIO.write(img, &quot;jpg&quot;, file); return &quot;redirect:/admin_category_list&quot;;&#125;","tags":[{"name":"SSM商城","slug":"SSM商城","permalink":"http://yoursite.com/tags/SSM商城/"}]},{"title":"商城框架搭建","date":"2018-01-23T01:37:19.281Z","path":"2018/01/23/商城框架搭建/","text":"实体类，声明了id和name,以及对应的setter,getter123456789101112131415161718192021public class Category &#123; private Integer id; private String name; public Integer getId() &#123; return id; &#125; public void setId(Integer id) &#123; this.id = id; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name == null ? null : name.trim(); &#125;&#125; 创建接口CategoryMapper，声明list方法12345import java.util.List; public interface CategoryMapper &#123; List&lt;Category&gt; list();&#125; 创建接口CategoryService，声明list方法1234import java.util.List;public interface CategoryService&#123; List&lt;Category&gt; list();&#125; 创建CategoryService接口的实现类CategoryServiceImpl123456789101112import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.List;@Servicepublic class CategoryServiceImpl implements CategoryService &#123; @Autowired CategoryMapper categoryMapper; public List&lt;Category&gt; list()&#123; return categoryMapper.list(); &#125;; &#125; 创建访问控制器CategoryController1234567891011121314151617181920import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.RequestMapping; import java.util.List;@Controller@RequestMapping(&quot;&quot;)public class CategoryController &#123; @Autowired CategoryService categoryService; @RequestMapping(&quot;admin_category_list&quot;) public String list(Model model)&#123; List&lt;Category&gt; cs= categoryService.list(); model.addAttribute(&quot;cs&quot;, cs); return &quot;admin/listCategory&quot;; &#125;&#125; 创建映射文件CategoryMapper.xml12345678910&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.how2java.tmall.mapper.CategoryMapper&quot;&gt; &lt;select id=&quot;list&quot; resultType=&quot;Category&quot;&gt; select * from category order by id desc &lt;/select&gt;&lt;/mapper&gt; 创建log4j.properties，开启日志12345678# Global logging configurationlog4j.rootLogger=ERROR, stdout# MyBatis logging configuration...log4j.logger.com.how2java.tmall=TRACE# Console output...log4j.appender.stdout=org.apache.log4j.ConsoleAppenderlog4j.appender.stdout.layout=org.apache.log4j.PatternLayoutlog4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n 在resources目录下新建jdbc.properties，配置数据库信息12345#数据库配置文件jdbc.driver=com.mysql.jdbc.Driverjdbc.url=jdbc:mysql://localhost:3306/ssm?useUnicode=true&amp;characterEncoding=utf8jdbc.username=rootjdbc.password=admin 在resources目录下新建applicationContext.xml123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;&gt; &lt;!-- 启动对注解的识别 --&gt; &lt;context:annotation-config /&gt; &lt;context:component-scan base-package=&quot;com.service&quot; /&gt; &lt;!-- 导入数据库配置文件 --&gt; &lt;context:property-placeholder location=&quot;classpath:jdbc.properties&quot;/&gt; &lt;!-- 配置数据库连接池 --&gt; &lt;bean id=&quot;dataSource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot; init-method=&quot;init&quot; destroy-method=&quot;close&quot;&gt; &lt;!-- 基本属性 url、user、password --&gt; &lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot; /&gt; &lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot; /&gt; &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot; /&gt; &lt;!-- 配置初始化大小、最小、最大 --&gt; &lt;property name=&quot;initialSize&quot; value=&quot;1&quot; /&gt; &lt;property name=&quot;minIdle&quot; value=&quot;1&quot; /&gt; &lt;property name=&quot;maxActive&quot; value=&quot;20&quot; /&gt; &lt;!-- 配置获取连接等待超时的时间 --&gt; &lt;property name=&quot;maxWait&quot; value=&quot;60000&quot; /&gt; &lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt; &lt;property name=&quot;timeBetweenEvictionRunsMillis&quot; value=&quot;60000&quot; /&gt; &lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt; &lt;property name=&quot;minEvictableIdleTimeMillis&quot; value=&quot;300000&quot; /&gt; &lt;property name=&quot;validationQuery&quot; value=&quot;SELECT 1&quot; /&gt; &lt;property name=&quot;testWhileIdle&quot; value=&quot;true&quot; /&gt; &lt;property name=&quot;testOnBorrow&quot; value=&quot;false&quot; /&gt; &lt;property name=&quot;testOnReturn&quot; value=&quot;false&quot; /&gt; &lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 --&gt; &lt;property name=&quot;poolPreparedStatements&quot; value=&quot;true&quot; /&gt; &lt;property name=&quot;maxPoolPreparedStatementPerConnectionSize&quot; value=&quot;20&quot; /&gt; &lt;/bean&gt; &lt;!--Mybatis的SessionFactory配置--&gt; &lt;bean id=&quot;sqlSession&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt; &lt;property name=&quot;typeAliasesPackage&quot; value=&quot;com.pojo&quot; /&gt; &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt; &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:mapper/*.xml&quot;/&gt; &lt;!--分页插件，目前先注释，后面重构的时候才会使用 &lt;property name=&quot;plugins&quot;&gt; &lt;array&gt; &lt;bean class=&quot;com.github.pagehelper.PageInterceptor&quot;&gt; &lt;property name=&quot;properties&quot;&gt; &lt;value&gt; &lt;/value&gt; &lt;/property&gt; &lt;/bean&gt; &lt;/array&gt; &lt;/property&gt; --&gt; &lt;/bean&gt; &lt;!--Mybatis的Mapper文件识别--&gt; &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt; &lt;property name=&quot;basePackage&quot; value=&quot;com.mapper&quot;/&gt; &lt;/bean&gt; &lt;/beans&gt; 在resources目录下新建springMVC.xml12345678910111213141516171819202122232425262728293031323334&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd&quot;&gt; &lt;!--启动注解识别--&gt; &lt;context:annotation-config/&gt; &lt;context:component-scan base-package=&quot;com.controller&quot;&gt; &lt;context:include-filter type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.Controller&quot;/&gt; &lt;/context:component-scan&gt; &lt;mvc:annotation-driven /&gt; &lt;!--开通静态资源的访问--&gt; &lt;mvc:default-servlet-handler /&gt; &lt;!-- 视图定位 --&gt; &lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt; &lt;property name=&quot;viewClass&quot; value=&quot;org.springframework.web.servlet.view.JstlView&quot; /&gt; &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot; /&gt; &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot; /&gt; &lt;/bean&gt; &lt;!-- 对上传文件的解析--&gt; &lt;bean id=&quot;multipartResolver&quot; class=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;/&gt;&lt;/beans&gt; 更改web.xml12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot; version=&quot;2.5&quot;&gt; &lt;!-- spring的配置文件--&gt; &lt;context-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt; &lt;/context-param&gt; &lt;listener&gt; &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt; &lt;/listener&gt; &lt;!--中文过滤器--&gt; &lt;filter&gt; &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt; &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt; &lt;init-param&gt; &lt;param-name&gt;encoding&lt;/param-name&gt; &lt;param-value&gt;utf-8&lt;/param-value&gt; &lt;/init-param&gt; &lt;/filter&gt; &lt;filter-mapping&gt; &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt; &lt;/filter-mapping&gt; &lt;!-- spring mvc核心：分发servlet --&gt; &lt;servlet&gt; &lt;servlet-name&gt;mvc-dispatcher&lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;!-- spring mvc的配置文件 --&gt; &lt;init-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:springMVC.xml&lt;/param-value&gt; &lt;/init-param&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;mvc-dispatcher&lt;/servlet-name&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; &lt;/web-app&gt; 在jsp目录中创建admin目录，接着创建listCategory.jsp文件1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot; import=&quot;java.util.*&quot;%&gt; &lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot;%&gt;&lt;%@include file=&quot;../include/admin/adminHeader.jsp&quot;%&gt;&lt;%@include file=&quot;../include/admin/adminNavigator.jsp&quot;%&gt; &lt;script&gt;$(function()&#123; $(&quot;#addForm&quot;).submit(function()&#123; if(!checkEmpty(&quot;name&quot;,&quot;分类名称&quot;)) return false; if(!checkEmpty(&quot;categoryPic&quot;,&quot;分类图片&quot;)) return false; return true; &#125;);&#125;); &lt;/script&gt; &lt;title&gt;分类管理&lt;/title&gt; &lt;div class=&quot;workingArea&quot;&gt; &lt;h1 class=&quot;label label-info&quot; &gt;分类管理&lt;/h1&gt; &lt;br&gt; &lt;br&gt; &lt;div class=&quot;listDataTableDiv&quot;&gt; &lt;table class=&quot;table table-striped table-bordered table-hover table-condensed&quot;&gt; &lt;thead&gt; &lt;tr class=&quot;success&quot;&gt; &lt;th&gt;ID&lt;/th&gt; &lt;th&gt;图片&lt;/th&gt; &lt;th&gt;分类名称&lt;/th&gt; &lt;th&gt;属性管理&lt;/th&gt; &lt;th&gt;产品管理&lt;/th&gt; &lt;th&gt;编辑&lt;/th&gt; &lt;th&gt;删除&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;c:forEach items=&quot;$&#123;cs&#125;&quot; var=&quot;c&quot;&gt; &lt;tr&gt; &lt;td&gt;$&#123;c.id&#125;&lt;/td&gt; &lt;td&gt;&lt;img height=&quot;40px&quot; src=&quot;img/category/$&#123;c.id&#125;.jpg&quot;&gt;&lt;/td&gt; &lt;td&gt;$&#123;c.name&#125;&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;admin_property_list?cid=$&#123;c.id&#125;&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-th-list&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;admin_product_list?cid=$&#123;c.id&#125;&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-shopping-cart&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;admin_category_edit?id=$&#123;c.id&#125;&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-edit&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;a deleteLink=&quot;true&quot; href=&quot;admin_category_delete?id=$&#123;c.id&#125;&quot;&gt;&lt;span class=&quot; glyphicon glyphicon-trash&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/c:forEach&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;div class=&quot;pageDiv&quot;&gt; &lt;%//@include file=&quot;../include/admin/adminPage.jsp&quot; %&gt; &lt;/div&gt; &lt;div class=&quot;panel panel-warning addDiv&quot;&gt; &lt;div class=&quot;panel-heading&quot;&gt;新增分类&lt;/div&gt; &lt;div class=&quot;panel-body&quot;&gt; &lt;form method=&quot;post&quot; id=&quot;addForm&quot; action=&quot;admin_category_add&quot; enctype=&quot;multipart/form-data&quot;&gt; &lt;table class=&quot;addTable&quot;&gt; &lt;tr&gt; &lt;td&gt;分类名称&lt;/td&gt; &lt;td&gt;&lt;input id=&quot;name&quot; name=&quot;name&quot; type=&quot;text&quot; class=&quot;form-control&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;分类圖片&lt;/td&gt; &lt;td&gt; &lt;input id=&quot;categoryPic&quot; accept=&quot;image/*&quot; type=&quot;file&quot; name=&quot;image&quot; /&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr class=&quot;submitTR&quot;&gt; &lt;td colspan=&quot;2&quot; align=&quot;center&quot;&gt; &lt;button type=&quot;submit&quot; class=&quot;btn btn-success&quot;&gt;提 交&lt;/button&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;%@include file=&quot;../include/admin/adminFooter.jsp&quot;%&gt;","tags":[{"name":"SSM商城","slug":"SSM商城","permalink":"http://yoursite.com/tags/SSM商城/"}]},{"title":"Java工具类","date":"2018-01-17T11:59:02.416Z","path":"2018/01/17/Java工具类/","text":"日期工具类字符串与日期的转换： 123456789101112131415161718192021222324252627282930import java.text.SimpleDateFormat;import java.util.Date;public class DateUtil &#123; //日期转字符 public static String formatDate(Date date,String format)&#123; String result=&quot;&quot;; SimpleDateFormat sdf=new SimpleDateFormat(format); if(date!=null)&#123; result=sdf.format(date); &#125; return result; &#125; //字符转日期 public static Date formatString(String str,String format) throws Exception&#123; if(StringUtil.isEmpty(str))&#123; return null; &#125; SimpleDateFormat sdf=new SimpleDateFormat(format); return sdf.parse(str); &#125; //获取当前时间 public static String getCurrentDateStr()throws Exception&#123; Date date=new Date(); SimpleDateFormat sdf=new SimpleDateFormat(&quot;yyyyMMddhhmmss&quot;); return sdf.format(date); &#125;&#125; 数据库连接工具类1234567891011121314151617public class DbUtil &#123; //获得连接 public Connection getCon() throws Exception&#123; Class.forName(PropertiesUtil.getValue(&quot;jdbcName&quot;)); Connection con=DriverManager.getConnection(PropertiesUtil.getValue(&quot;dbUrl&quot;), PropertiesUtil.getValue(&quot;dbUserName&quot;), PropertiesUtil.getValue(&quot;dbPassword&quot;)); return con; &#125; //关闭连接 public void closeCon(Connection con)throws Exception&#123; if(con!=null)&#123; con.close(); &#125; &#125; &#125; 加密工具类12345678public class MD5Util &#123; public static String EncoderPwdByMd5(String str) throws NoSuchAlgorithmException, UnsupportedEncodingException&#123; MessageDigest md5=MessageDigest.getInstance(&quot;MD5&quot;); BASE64Encoder base64en=new BASE64Encoder(); return base64en.encode(md5.digest(str.getBytes(&quot;utf-8&quot;))); &#125;&#125; 读取配置文件1234567891011121314public class PropertiesUtil &#123; public static String getValue(String key)&#123; Properties prop=new Properties(); InputStream in=new PropertiesUtil().getClass().getResourceAsStream(&quot;/setting.properties&quot;); try &#123; prop.load(in); &#125; catch (IOException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; return (String)prop.get(key); &#125;&#125; 字符串工具类1234567891011121314151617181920212223242526public class StringUtil &#123; public static boolean isEmpty(String str)&#123; if(str==null || &quot;&quot;.equals(str.trim()))&#123; return true; &#125;else&#123; return false; &#125; &#125; public static boolean isNotEmpty(String str)&#123; if(str!=null &amp;&amp; !&quot;&quot;.equals(str.trim()))&#123; return true; &#125;else&#123; return false; &#125; &#125; public static String formatLike(String str)&#123; if(isNotEmpty(str))&#123; return &quot;%&quot;+str+&quot;%&quot;; &#125;else&#123; return null; &#125; &#125;&#125;","tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"}]},{"title":"Mysql select statement","date":"2018-01-17T11:56:48.632Z","path":"2018/01/17/Mysql-select-statement/","text":"select statement可以从表或视图中查询数据 syntax of the SELECT statement: 1234567891011SELECT column_1, column_2, ...FROM table_1[INNER | LEFT |RIGHT] JOIN table_2 ON conditionsWHERE conditionsGROUP BY column_1HAVING group_conditionsORDER BY column_1LIMIT offset, length; SELECT statement examples： 1234SELECTlastname,firstname,jobtype FROMemployees; 1SELECT * FROM employees; MySQL DISTINCT clause123456SELECT DISTINCT columnsFROM table_nameWHERE where_conditions; MySQL DISTINCT example: 12345SELECT DISTINCTlastname FROMemployeesORDER BY lastname; If a column has NULL values and you use the DISTINCT clause for that column, MySQL keeps one NULL value and eliminates the other. use the DISTINCT clause with more than one column. In this case, MySQL uses the combination of all columns to determine the uniqueness of the row in the result set. 1234567SELECT DISTINCT state, cityFROM customersWHERE state IS NOT NULLORDER BY state , city; use the GROUP BY clause in the SELECT statement without using aggregate functions, the GROUP BY clause behaves like the DISTINCT clause. 123456SELECT stateFROM customersGROUP BY state; use the DISTINCT clause with an aggregate function e.g., SUM, AVG, and COUNT, to remove duplicate rows before MySQL applies the aggregate function to the result set. 123456SELECT COUNT(DISTINCT state)FROM customersWHERE country = &apos;USA&apos;; use the DISTINCT clause with the LIMIT clause, MySQL stops searching immediately when it finds the number of unique rows specified in the LIMIT clause 1234567SELECT DISTINCT stateFROM customersWHERE state IS NOT NULLLIMIT 5; WHERE clauseuse WHERE clause to specify exact rows to select based on particular filter express or condition 123456SELECT lastname,firstname,jobtypeFROM employeesWHERE jobtype=&apos;Sales Rep&apos; AND officeCode = 1; the comparison operators that can use to form filtering expressions in the WHERE clause. Operator Description = Equal to. You can use it with almost any data types. &lt;&gt; or != Not equal to. &lt; Less than. You typically use it with numeric and date/time data types. &gt; Greater than. &lt;= Less than or equal to &gt;= Greater than or equal to Note: some useful operators that you can use in the WHERE clause to form complex conditions:BETWEEN,LIKE,IN,IS NULL. The WHERE clause is used not only with the SELECT statement but also other SQL statements to filter rows such as DELETE and UPDATE.ORDER BY clauseuse the ORDER BY clause to sort the result set 123SELECT column1, column2,...FROM tblORDER BY column1 [ASC|DESC], column2 [ASC|DESC],... ORDER BY sort by an expression example: 12345678910SELECT ordernumber, orderlinenumber, quantityOrdered * priceEach AS subtotalFROM orderdetailsORDER BY ordernumber, orderLineNumber, subtotal; ORDER BY with customer sort order:define custom sort order use FIELD() function 1234567891011SELECT orderNumber, statusFROM ordersORDER BY FIELD(status, &apos;In Process&apos;, &apos;On Hold&apos;, &apos;Cancelled&apos;, &apos;Resolved&apos;, &apos;Disputed&apos;, &apos;Shipped&apos;); Natural Sorting with ORDER BY Clause: 123456SELECT item_noFROM itemsORDER BY CAST(item_no AS UNSIGNED) , item_no; the LENGTH function returns the length of a string12345SELECT item_noFROM itemsORDER BY LENGTH(item_no) , item_no; use the parentheses statement returns the customers who locate in the USA or France and have credit limit greater than 10000: 1234567SELECT customername, country, creditLimitFROM customersWHERE (country = &apos;USA&apos; OR country = &apos;France&apos;) AND creditlimit &gt; 100000; IN OperatorThe IN operator allows you to determine if a specified value matches any one of a list or a subquery: 123456SELECT column1,column2,...FROM table_nameWHERE (expr|column_1) IN (&apos;value1&apos;,&apos;value2&apos;,...); find out the offices that locate in the U.S. and France: 123456SELECT officeCode, city, phone, countryFROM officesWHERE country IN (&apos;USA&apos; , &apos;France&apos;); get offices that do not locate in USA and France, you use NOT IN in the WHERE clause: 123456SELECT officeCode, city, phoneFROM officesWHERE country NOT IN (&apos;USA&apos; , &apos;France&apos;); MySQL IN with subquery: 1234567891011SELECT orderNumber, customerNumber, status, shippedDateFROM ordersWHERE orderNumber IN (SELECT orderNumber FROM orderDetails GROUP BY orderNumber HAVING SUM(quantityOrdered * priceEach) &gt; 60000); BETWEEN Operatoruse the BETWEEN operator in the WHERE clause of the SELECT, INSERT, UPDATE, and DELETE statements: 1expr [NOT] BETWEEN begin_expr AND end_expr; find products whose buy prices are within the ranges of $90 and $100: 123456SELECT productCode, productName, buyPriceFROM productsWHERE buyPrice BETWEEN 90 AND 100; get the orders whose required dates are from 01/01/2003 to 01/31/2003: 1234567SELECT orderNumber, requiredDate, statusFROM ordersWHERE requireddate BETWEEN CAST(&apos;2003-01-01&apos; AS DATE) AND CAST(&apos;2003-01-31&apos; AS DATE);","tags":[{"name":"Mysql","slug":"Mysql","permalink":"http://yoursite.com/tags/Mysql/"}]},{"title":"林夕语录","date":"2018-01-02T02:53:47.000Z","path":"2018/01/02/林夕语录/","text":"让我感谢你，赠我空欢喜 喜悦出于巧合，眼泪何必固执。 与你淡似水,便千杯不醉。 不错过任何挑逗，也不为任何人停留。 你在我旁边 只打了个照面 五月的晴天 闪了电。 就像蝴蝶飞不过沧海，没有谁忍心责怪。 害怕悲剧重演 我的命中命中越美丽的东西我越不可碰。 往事纵不如烟，但时间会把当年的大事缩小，变成哭笑不得的小插曲 没明白么,在乎什么,败在什么。 但知识易得，智慧难求。 要多坚强，才敢念念不忘。 我们都是风雪夜中的赶路人，因相遇摩擦，融化了彼此肩头的雪花，而后因为各自的路线不同，相距越来越远，雪花再覆肩头。 彼岸，没有灯塔，我，依然，张望着。 心灰了还未碎，心死了还在醉。 感谢永远有歌，把心境道破。 总要为想爱的人不想活，才跟该爱的人生活。 我唱出心里话时，眼泪会流，要是怕难过，抱住我手。 当世事再没完美，可远在岁月如歌中找你。","tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}]},{"title":"在路上","date":"2017-12-15T11:32:35.000Z","path":"2017/12/15/在路上/","text":"","tags":[{"name":"游走","slug":"游走","permalink":"http://yoursite.com/tags/游走/"}]},{"title":"hello there","date":"2017-01-15T11:31:08.000Z","path":"2017/01/15/hello-there/","text":"你好这是我的第一篇文章:)","tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}]},{"title":"Hello World","date":"2017-01-15T10:10:05.845Z","path":"2017/01/15/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]