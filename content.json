[{"title":"An introduction to the Unified Modeling Language","date":"2018-03-20T04:29:35.000Z","path":"2018/03/20/An-introduction-to-the-Unified-Modeling-Language/","text":"The most useful, standard UML diagrams are: use case diagram, class diagram, sequence diagram, statechart diagram, activity diagram, component diagram, and deployment diagram. Use-case diagramA use case illustrates a unit of functionality provided by the system. The main purpose of the use-case diagram is to help development teams visualize the functional requirements of a system, including the relationship of “actors” (human beings who will interact with the system) to essential processes, as well as the relationships among different use cases. Use-case diagrams generally show groups of use cases — either all use cases for the complete system, or a breakout of a particular group of use cases with related functionality (e.g., all security administration-related use cases). To show a use case on a use-case diagram, you draw an oval in the middle of the diagram and put the name of the use case in the center of, or below, the oval. To draw an actor (indicating a system user) on a use-case diagram, you draw a stick person to the left or right of your diagram (and just in case you’re wondering, some people draw prettier stick people than others). Use simple lines to depict relationships between actors and use cases, as shown in Figure 1. A use-case diagram is typically used to communicate the high-level functions of the system and the system’s scope. By looking at our use-case diagram in Figure 1, you can easily tell the functions that our example system provides. This system lets the band manager view a sales statistics report and the Billboard 200 report for the band’s CDs. It also lets the record manager view a sales statistics report and the Billboard 200 report for a particular CD. The diagram also tells us that our system delivers Billboard reports from an external system called Billboard Reporting Service. In addition, the absence of use cases in this diagram shows what the system doesn’t do. For example, it does not provide a way for a band manager to listen to songs from the different albums on the Billboard 200 — i.e., we see no reference to a use case called Listen to Songs from Billboard 200. This absence is not a trivial matter. With clear and simple use-case descriptions provided on such a diagram, a project sponsor can easily see if needed functionality is present or not present in the system. Class diagramThe class diagram shows how the different entities (people, things, and data) relate to each other; in other words, it shows the static structures of the system. A class diagram can be used to display logical classes, which are typically the kinds of things the business people in an organization talk about — rock bands, CDs, radio play; or loans, home mortgages, car loans, and interest rates. Class diagrams can also be used to show implementation classes, which are the things that programmers typically deal with. An implementation class diagram will probably show some of the same classes as the logical classes diagram.The implementation class diagram won’t be drawn with the same attributes, however, because it will most likely have references to things like Vectors and HashMaps. A class is depicted on the class diagram as a rectangle with three horizontal sections, as shown in Figure 2. The upper section shows the class’s name; the middle section contains the class’s attributes; and the lower section contains the class’s operations (or “methods”). Figure 2: Sample class object in a class diagram In my experience, almost every developer knows what this diagram is, yet I find that most programmers draw the relationship lines incorrectly. For a class diagram like the one in Figure 3, you should draw the inheritance relationship1 using a line with an arrowhead at the top pointing to the super class, and the arrowhead should be a completed triangle. [Note: For more information on inheritance and other object-oriented principles, see the Java tutorial What Is Inheritance?] An association relationship should be a solid line if both classes are aware of each other and a line with an open arrowhead if the association is known by only one of the classes. Figure 3: A complete class diagram, including the class object shown in Figure 2 In Figure 3, we see both the inheritance relationship and two association relationships. The CDSalesReport class inherits from the Report class. A CDSalesReport is associated with one CD, but the CD class doesn’t know anything about the CDSalesReport class. The CD and the Band classes both know about each other, and both classes can be associated to one or more of each other. A class diagram can incorporate many more concepts. Sequence diagramSequence diagrams show a detailed flow for a specific use case or even just part of a specific use case. They are almost self explanatory; they show the calls between the different objects in their sequence and can show, at a detailed level, different calls to different objects. A sequence diagram has two dimensions: The vertical dimension shows the sequence of messages/calls in the time order that they occur; the horizontal dimension shows the object instances to which the messages are sent. A sequence diagram is very simple to draw. Across the top of your diagram, identify the class instances (objects) by putting each class instance inside a box (see Figure 4). In the box, put the class instance name and class name separated by a space/colon/space “ : “ (e.g., myReportGenerator : ReportGenerator). If a class instance sends a message to another class instance, draw a line with an open arrowhead pointing to the receiving class instance; place the name of the message/method above the line. Optionally, for important messages, you can draw a dotted line with an arrowhead pointing back to the originating class instance; label the return value above the dotted line. Personally, I always like to include the return value lines because I find the extra details make it easier to read. Reading a sequence diagram is very simple. Start at the top left corner with the “driver” class instance that starts the sequence. Then follow each message down the diagram. Remember: Even though the example sequence diagram in Figure 4 shows a return message for each sent message, this is optional. Figure 4: A sample sequence diagram By reading our sample sequence diagram in Figure 4, you can see how to create a CD Sales Report. The aServlet object is our example driver. aServlet sends a message to the ReportGenerator class instance named gen. The message is labeled generateCDSalesReport, which means that the ReportGenerator object implements this message handler. On closer inspection, the generateCDSalesReport message label has cdId in parentheses, which means that aServlet is passing a variable named cdId with the message. When gen instance receives a generateCDSalesReport message, it then makes subsequent calls to the CDSalesReport class, and an actual instance of a CDSalesReport called aCDReport gets returned. The gen instance then makes calls to the returned aCDReport instance, passing it parameters on each message call. At the end of the sequence, the gen instance returns aCDReport to its caller aServlet. Please note: The sequence diagram in Figure 4 is arguably too detailed for a typical sequence diagram. However, I believe it is simple enough to understand, and it shows how nested calls are drawn. Also, with junior developers, sometimes it is necessary to break down sequences to this explicit level to help them understand what they are supposed to do. Statechart diagramThe statechart diagram models the different states that a class can be in and how that class transitions from state to state. It can be argued that every class has a state, but that every class shouldn’t have a statechart diagram. Only classes with “interesting” states — that is, classes with three or more potential states during system activity — should be modeled. As shown in Figure 5, the notation set of the statechart diagram has five basic elements: the initial starting point, which is drawn using a solid circle; a transition between states, which is drawn using a line with an open arrowhead; a state, which is drawn using a rectangle with rounded corners; a decision point, which is drawn as an open circle; and one or more termination points, which are drawn using a circle with a solid circle inside it. To draw a statechart diagram, begin with a starting point and a transition line pointing to the initial state of the class. Draw the states themselves anywhere on the diagram, and then simply connect them using the state transition lines. Figure 5: Statechart diagram showing the various states that classes pass through in a functioning system The example statechart diagram in Figure 5 shows some of the potential information they can communicate. For instance, you can tell that loan processing begins in the Loan Application state. When the pre-approval process is done, depending on the outcome, you move to either the Loan Pre-approved state or the Loan Rejected state. This decision, which is made during the transition process, is shown with a decision point — the empty circle in the transition line. By looking at the example, a person can tell that a loan cannot go from the Loan Pre-Approved state to the Loan in Maintenance state without going through the Loan Closing state. Also, by looking at our example diagram, a person can tell that all loans will end in either the Loan Rejected state or the Loan in Maintenance state. Activity diagramActivity diagrams show the procedural flow of control between two or more class objects while processing an activity. Activity diagrams can be used to model higher-level business process at the business unit level, or to model low-level internal class actions. In my experience, activity diagrams are best used to model higher-level processes, such as how the company is currently doing business, or how it would like to do business. This is because activity diagrams are “less technical” in appearance, compared to sequence diagrams, and business-minded people tend to understand them more quickly. An activity diagram’s notation set is similar to that used in a statechart diagram. Like a statechart diagram, the activity diagram starts with a solid circle connected to the initial activity. The activity is modeled by drawing a rectangle with rounded edges, enclosing the activity’s name. Activities can be connected to other activities through transition lines, or to decision points that connect to different activities guarded by conditions of the decision point. Activities that terminate the modeled process are connected to a termination point (just as in a statechart diagram). Optionally, the activities can be grouped into swimlanes, which are used to indicate the object that actually performs the activity, as shown in Figure 6. Figure 6: Activity diagram, with two swimlanes to indicate control of activity by two objects: the band manager, and the reporting tool In our example activity diagram, we have two swimlanes because we have two objects that control separate activities: a band manager and a reporting tool. The process starts with the band manager electing to view the sales report for one of his bands. The reporting tool then retrieves and displays all the bands that person manages and asks him to choose one. After the band manager selects a band, the reporting tool retrieves the sales information and displays the sales report. The activity diagram shows that displaying the report is the last step in the process. Component diagramA component diagram provides a physical view of the system. Its purpose is to show the dependencies that the software has on the other software components (e.g., software libraries) in the system. The diagram can be shown at a very high level, with just the large-grain components, or it can be shown at the component package level. [Note: The phrase component package level is a programming language-neutral way of referring to class container levels such as .NET’s namespaces (e.g., System.Web.UI) or Java’s packages (e.g., java.util).] Modeling a component diagram is best described through an example. Figure 7 shows four components: Reporting Tool, Billboard Service, Servlet 2.2 API, and JDBC API. The arrowed lines from the Reporting Tool component to the Billboard Service, Servlet 2.2 API, and JDBC API components mean that the Reporting Tool is dependent on those three components. Figure 7: A component diagram shows interdependencies of various software components the system comprises Deployment diagramThe deployment diagram shows how a system will be physically deployed in the hardware environment. Its purpose is to show where the different components of the system will physically run and how they will communicate with each other. Since the diagram models the physical runtime, a system’s production staff will make considerable use of this diagram. The notation in a deployment diagram includes the notation elements used in a component diagram, with a couple of additions, including the concept of a node. A node represents either a physical machine or a virtual machine node (e.g., a mainframe node). To model a node, simply draw a three-dimensional cube with the name of the node at the top of the cube. Use the naming convention used in sequence diagrams: [instance name] : [instance type] (e.g., “w3reporting.myco.com : Application Server”). Figure 8: Deployment diagram The deployment diagram in Figure 8 shows that the users access the Reporting Tool by using a browser running on their local machine and connecting via HTTP over their company’s intranet to the Reporting Tool. This tool physically runs on the Application Server named w3reporting.myco.com. The diagram shows the Reporting Tool component drawn inside of IBM WebSphere, which in turn is drawn inside of the node w3.reporting.myco.com. The Reporting Tool connects to its reporting database using the Java language to IBM DB2’s JDBC interface, which then communicates to the actual DB2 database running on the server named db1.myco.com using native DB2 communication. In addition to talking to the reporting database, the Report Tool component communicates via SOAP over HTTPS to the Billboard Service.","tags":[]},{"title":"Entity Relationship Modeling Examples","date":"2018-03-20T03:32:48.000Z","path":"2018/03/20/Entity-Relationship-Modeling-Examples/","text":"This section explains the requirements for our three example databases—music, university, and flight—and shows you their Entity Relationship diagrams: The music database is designed to store details of a music collection, including the albums in the collection, the artists who made them, the tracks on the albums, and when each track was last played. The university database captures the details of students, courses, and grades for a university. The flight database stores an airline timetable of flight routes, times, and the plane types. The Music DatabaseThe music database stores details of a personal music library, and could be used to manage your MP3, CD, or vinyl collection. Because this database is for a personal collection, it’s relatively simple and stores only the relationships between artists, albums, and tracks. It ignores the requirements of many music genres, making it most useful for storing popular music and less useful for storing jazz or classical music. We first draw up a clear list of requirements for our database: The collection consists of albums. An album is made by exactly one artist. An artist makes one or more albums. An album contains one or more tracks Artists, albums, and tracks each have a name. Each track is on exactly one album. Each track has a time length, measured in seconds. When a track is played, the date and time the playback began (to the nearest second) should be recorded; this is used for reporting when a track was last played, as well as the number of times music by an artist, from an album, or a track has been played.There’s no requirement to capture composers, group members or sidemen, recording date or location, the source media, or any other details of artists, albums, or tracks. The ER diagram derived from our requirements is shown in Figure1. You’ll notice that it consists of only one-to-many relationships: one artist can make many albums, one album can contain many tracks, and one track can be played many times. Conversely, each play is associated with one track, a track is on one album, and an album is by one artist. The attributes are straightforward: artists, albums, and tracks have names, as well as identifiers to uniquely identify each entity. The track entity has a time attribute to store the duration, and the played entity has a timestamp to store when the track was played. The only strong entity in the database is Artist, which has an artist_id attribute that uniquely identifies it. Each Album entity is uniquely identified by its album_id combined with the artist_id of the corresponding Artist entity. A Track entity is similarly uniquely identified by its track_id combined with the related album_id and artist_id attributes. The Played entity is uniquely identified by a combination of its played time, and the related track_id, album_id, and artist_id attributes. What it doesn’t doWe’ve kept the music database simple because adding extra features doesn’t help you learn anything new, it just makes the explanations longer. If you wanted to use the music database in practice, then you might consider adding the following features: Support for compilations or various-artists albums, where each track may be by a different artist and may then have its own associated album-like details such as a recording date and time. Under this model, the album would be a strong entity, with many-to-many relationships between artists and albums. Playlists, a user-controlled collection of tracks. For example, you might create a playlist of your favorite tracks from an artist. Track ratings, to record your opinion on how good a track is. Source details, such as when you bought an album, what media it came on, how much you paid, and so on. Album details, such as when and where it was recorded, the producer and label, the band members or sidemen who played on the album, and even its artwork. Smarter track management, such as modeling that allows the same track to appear on many albums. The University DatabaseThe university database stores details about university students, courses, the semester a student took a particular course (and his mark and grade if he completed it), and what degree program each student is enrolled in. The database is a long way from one that’d be suitable for a large tertiary institution, but it does illustrate relationships that are interesting to query, and it’s easy to relate to when you’re learning SQL. We explain the requirements next and discuss their shortcomings at the end of this section. Consider the following requirements list: The university offers one or more programs. A program is made up of one or more courses. A student must enroll in a program. A student takes the courses that are part of her program. A program has a name, a program identifier, the total credit points required to graduate, and the year it commenced. A course has a name, a course identifier, a credit point value, and the year it commenced. Students have one or more given names, a surname, a student identifier, a date of birth, and the year they first enrolled. We can treat all given names as a single object—for example, “John Paul.” When a student takes a course, the year and semester he attempted it are recorded. When he finishes the course, a grade (such as A or B) and a mark (such as 60 percent) are recorded. Each course in a program is sequenced into a year (for example, year 1) and a semester (for example, semester 1). The ER diagram derived from our requirements is shown in Figure2. Although it is compact, the diagram uses some advanced features, including relationships that have attributes and two many-to-many relationships. In our design: Student is a strong entity, with an identifier, student_id, created to be the primary key used to distinguish between students (remember, we could have several students with the same name). Program is a strong entity, with the identifier program_id as the primary key used to distinguish between programs. Each student must be enrolled in a program, so the Student entity participates totally in the many-to-one EnrollsIn relationship with Program. - A program can exist without having any enrolled students, so it participates partially in this relationship. A Course has meaning only in the context of a Program, so it’s a weak entity, with course_id as a weak key. This means that a Course is uniquely identified using its course_id and the program_id of its owning program. As a weak entity, Course participates totally in the many-to-one identifying relationship with its owning Program. This relationship has Year and Semester attributes that identify its sequence position. Student and Course are related through the many-to-many Attempts relationships; a course can exist without a student, and a student can be enrolled without attempting any courses, so the participation is not total. When a student attempts a course, there are attributes to capture the Year and Semester, and the Mark and Grade. What it doesn’t do Our database design is rather simple, but this is because the requirements are simple. For a real university, many more aspects would need to be captured by the database. For example, the requirements don’t mention anything about campus, study mode, course prerequisites, lecturers, timetabling details, address history, financials, or assessment details. The database also doesn’t allow a student to be in more than one degree program, nor does it allow a course to appear as part of different programs. The Flight DatabaseThe flight database stores details about an airline’s fleet, flights, and seat bookings. Again, it’s a hugely simplified version of what a real airline would use, but the principles are the same. Consider the following requirements list: The airline has one or more airplanes. An airplane has a model number, a unique registration number, and the capacity to take one or more passengers. An airplane flight has a unique flight number, a departure airport, a destination airport, a departure date and time, and an arrival date and time. Each flight is carried out by a single airplane. A passenger has given names, a surname, and a unique email address. A passenger can book a seat on a flight.The ER diagram derived from our requirements is shown in Figure3: An Airplane is uniquely identified by its RegistrationNumber, so we use this as the primary key. A Flight is uniquely identified by its FlightNumber, so we use the flight number as the primary key. The departure and destination airports are captured in the From and To attributes, and we have separate attributes for the departure and arrival date and time. Because no two passengers will share an email address, we can use the EmailAddress as the primary key for the Passenger entity. An airplane can be involved in any number of flights, while each flight uses exactly one airplane, so the Flies relationship between the Airplane and Flight relationships has cardinality 1:N; because a flight cannot exist without an airplane, the Flight entity participates totally in this relationship. A passenger can book any number of flights, while a flight can be booked by any number of passengers. As discussed earlier in Intermediate Entities,” we could specify an M:N Books relationship between the Passenger and Flight relationship, but considering the issue more carefully shows that there is a hidden entity here: the booking itself. We capture this by creating the intermediate entity Booking and 1:N relationships between it and the Passenger and Flight entities. Identifying such entities allows us to get a better picture of the requirements. Note that even if we didn’t notice this hidden entity, it would come out as part of the ER-to-tables mapping process we’ll describe next in Using the Entity Relationship Model.” What it doesn’t do Again, this is a very simple flight database. There are no requirements to capture passenger details such as age, gender, or frequent-flier number. We’ve treated the capacity of the airplane as an attribute of an individual airplane. If, instead, we assumed that the capacity is determined by the model number, we would have created a new AirplaneModel entity with the attributes ModelNumber and Capacity. The Airplane entity would then not have a Capacity attribute. We’ve mapped a different flight number to each flight between two destinations. Airlines typically use a flight number to identify a given flight path and schedule, and they specify the date of the flight independently of the flight number. For example, there is one IR655 flight on April 1, another on April 2, and so on. Different airplanes can operate on the same flight number over time; our model would need to be extended to support this. The system also assumes that each leg of a multihop flight has a different FlightNumber. This means that a flight from Dubai to Christchurch via Singapore and Melbourne would need a different FlightNumber for the Dubai-Singapore, Singapore-Melbourne, and Melbourne-Christchurch legs. Our database also has limited ability to describe airports. In practice, each airport has a name, such as “Melbourne Regional Airport,” “Mehrabad,” or “Tullamarine.” The name can be used to differentiate between airports, but most passengers will just use the name of the town or city. This can lead to confusion, when, for example, a passenger could book a flight to Melbourne, Florida, USA, instead of Melbourne, Victoria, Australia. To avoid such problems, the International Air Transport Association (IATA) assigns a unique airport code to each airport; the airport code for Melbourne, Florida, USA is MLB, while the code for Melbourne, Victoria, Australia is MEL. If we were to model the airport as a separate entity, we could use the IATA-assigned airport code as the primary key. Incidentally, there’s an alternative set of airport codes assigned by the International Civil Aviation Organization (ICAO); under this code, Melbourne, Florida is KMLB, and Melbourne, Australia is YMML.","tags":[{"name":"mysql","slug":"mysql","permalink":"http://yoursite.com/tags/mysql/"}]},{"title":"SSM 类别删除","date":"2018-03-14T01:31:53.000Z","path":"2018/03/14/SSM-类别删除/","text":"用于删除的超链1&lt;a deleteLink=&quot;true&quot; href=&quot;admin_category_delete?id=$&#123;c.id&#125;&quot;&gt;&lt;span class=&quot; glyphicon glyphicon-trash&quot;&gt;&lt;/span&gt;&lt;/a&gt; 删除前的确认操作12345678910111213$(function()&#123; $(&quot;a&quot;).click(function()&#123; var deleteLink = $(this).attr(&quot;deleteLink&quot;); console.log(deleteLink); if(&quot;true&quot;==deleteLink)&#123; var confirmDelete = confirm(&quot;确认要删除&quot;); if(confirmDelete) return true; return false; &#125; &#125;);&#125;) 增加删除sql语句1234567891011121314151617181920212223&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;com.how2java.tmall.mapper.CategoryMapper&quot;&gt; &lt;select id=&quot;list&quot; resultType=&quot;Category&quot;&gt; select * from category order by id desc &lt;if test=&quot;start!=null and count!=null&quot;&gt; limit #&#123;start&#125;,#&#123;count&#125; &lt;/if&gt; &lt;/select&gt; &lt;select id=&quot;total&quot; resultType=&quot;int&quot;&gt; select count(*) from category &lt;/select&gt; &lt;insert id=&quot;add&quot; keyProperty=&quot;id&quot; useGeneratedKeys=&quot;true&quot; parameterType=&quot;Category&quot; &gt; insert into category ( name ) values (#&#123;name&#125;) &lt;/insert&gt; &lt;delete id=&quot;delete&quot;&gt; delete from category where id= #&#123;id&#125; &lt;/delete&gt;&lt;/mapper&gt; CategoryController 映射路径admin_category_delete 提供参数接受id注入 提供session参数，用于后续定位文件位置 通过categoryService删除数据 通过session获取ControllerContext然后获取分类图片位置，接着删除分类图片 客户端跳转到 admin_category_list 12345678910@RequestMapping(&quot;admin_category_delete&quot;) public String delete(int id,HttpSession session) throws IOException &#123; categoryService.delete(id); File imageFolder= new File(session.getServletContext().getRealPath(&quot;img/category&quot;)); File file = new File(imageFolder,id+&quot;.jpg&quot;); file.delete(); return &quot;redirect:/admin_category_list&quot;; &#125;","tags":[{"name":"SSM商城","slug":"SSM商城","permalink":"http://yoursite.com/tags/SSM商城/"}]},{"title":"SSM 类别编辑","date":"2018-01-23T02:01:12.000Z","path":"2018/01/23/SSM-类别编辑/","text":"用于编辑的超链1&lt;a href=&quot;admin_category_edit?id=$&#123;c.id&#125;&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-edit&quot;&gt;&lt;/span&gt;&lt;/a&gt; 增加通过id获取Category对象的sql语句123456789101112131415161718192021222324252627&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.how2java.tmall.mapper.CategoryMapper&quot;&gt; &lt;select id=&quot;list&quot; resultType=&quot;Category&quot;&gt; select * from category order by id desc &lt;if test=&quot;start!=null and count!=null&quot;&gt; limit #&#123;start&#125;,#&#123;count&#125; &lt;/if&gt; &lt;/select&gt; &lt;select id=&quot;total&quot; resultType=&quot;int&quot;&gt; select count(*) from category &lt;/select&gt; &lt;insert id=&quot;add&quot; keyProperty=&quot;id&quot; useGeneratedKeys=&quot;true&quot; parameterType=&quot;Category&quot; &gt; insert into category ( name ) values (#&#123;name&#125;) &lt;/insert&gt; &lt;delete id=&quot;delete&quot;&gt; delete from category where id= #&#123;id&#125; &lt;/delete&gt; &lt;select id=&quot;get&quot; resultType=&quot;Category&quot;&gt; select * from category where id= #&#123;id&#125; &lt;/select&gt;&lt;/mapper&gt; CategoryMapper增加get方法12345678910111213import java.util.List; public interface CategoryMapper &#123; List&lt;Category&gt; list(Page page); int total(); void add(Category category); void delete(int id); Category get(int id);&#125; CategoryController增加edit方法 映射admin_category_edit路径的访问 参数id用来接受注入 通过categoryService.get获取Category对象 把对象放在“c”上 返回editCategory.jsp 123456@RequestMapping(&quot;admin_category_edit&quot;)public String edit(int id,Model model) throws IOException &#123; Category c= categoryService.get(id); model.addAttribute(&quot;c&quot;, c); return &quot;admin/editCategory&quot;;&#125; editCategory.jsp页面12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot; import=&quot;java.util.*&quot;%&gt; &lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot;%&gt;&lt;%@include file=&quot;../include/admin/adminHeader.jsp&quot;%&gt;&lt;%@include file=&quot;../include/admin/adminNavigator.jsp&quot;%&gt; &lt;title&gt;编辑分类&lt;/title&gt; &lt;script&gt; $(function()&#123; $(&quot;#editForm&quot;).submit(function()&#123; if(!checkEmpty(&quot;name&quot;,&quot;分类名称&quot;)) return false; return true; &#125;); &#125;); &lt;/script&gt; &lt;div class=&quot;workingArea&quot;&gt; &lt;ol class=&quot;breadcrumb&quot;&gt; &lt;li&gt;&lt;a href=&quot;admin_category_list&quot;&gt;所有分类&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;active&quot;&gt;编辑分类&lt;/li&gt; &lt;/ol&gt; &lt;div class=&quot;panel panel-warning editDiv&quot;&gt; &lt;div class=&quot;panel-heading&quot;&gt;编辑分类&lt;/div&gt; &lt;div class=&quot;panel-body&quot;&gt; &lt;form method=&quot;post&quot; id=&quot;editForm&quot; action=&quot;admin_category_update&quot; enctype=&quot;multipart/form-data&quot;&gt; &lt;table class=&quot;editTable&quot;&gt; &lt;tr&gt; &lt;td&gt;分类名称&lt;/td&gt; &lt;td&gt;&lt;input id=&quot;name&quot; name=&quot;name&quot; value=&quot;$&#123;c.name&#125;&quot; type=&quot;text&quot; class=&quot;form-control&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;分类圖片&lt;/td&gt; &lt;td&gt; &lt;input id=&quot;categoryPic&quot; accept=&quot;image/*&quot; type=&quot;file&quot; name=&quot;image&quot; /&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr class=&quot;submitTR&quot;&gt; &lt;td colspan=&quot;2&quot; align=&quot;center&quot;&gt; &lt;input type=&quot;hidden&quot; name=&quot;id&quot; value=&quot;$&#123;c.id&#125;&quot;&gt; &lt;button type=&quot;submit&quot; class=&quot;btn btn-success&quot;&gt;提 交&lt;/button&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt; 编辑页面提交数据12&lt;form method=&quot;post&quot; id=&quot;editForm&quot; action=&quot;admin_category_update&quot; enctype=&quot;multipart/form-data&quot;&gt; CategoryMapper.xml增加修改的sql语句12345678910111213141516171819202122232425262728293031&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.how2java.tmall.mapper.CategoryMapper&quot;&gt; &lt;select id=&quot;list&quot; resultType=&quot;Category&quot;&gt; select * from category order by id desc &lt;if test=&quot;start!=null and count!=null&quot;&gt; limit #&#123;start&#125;,#&#123;count&#125; &lt;/if&gt; &lt;/select&gt; &lt;select id=&quot;total&quot; resultType=&quot;int&quot;&gt; select count(*) from category &lt;/select&gt; &lt;insert id=&quot;add&quot; keyProperty=&quot;id&quot; useGeneratedKeys=&quot;true&quot; parameterType=&quot;Category&quot; &gt; insert into category ( name ) values (#&#123;name&#125;) &lt;/insert&gt; &lt;delete id=&quot;delete&quot;&gt; delete from category where id= #&#123;id&#125; &lt;/delete&gt; &lt;select id=&quot;get&quot; resultType=&quot;Category&quot;&gt; select * from category where id= #&#123;id&#125; &lt;/select&gt; &lt;update id=&quot;update&quot; parameterType=&quot;Category&quot; &gt; update category set name=#&#123;name&#125; where id=#&#123;id&#125; &lt;/update&gt;&lt;/mapper&gt; CategoryMapper增加update方法123456789101112131415import java.util.List; public interface CategoryMapper &#123; List&lt;Category&gt; list(Page page); int total(); void add(Category category); void delete(int id); Category get(int id); void update(Category category);&#125; CategoryController add方法映射路径admin_category_update的访问 通过categoryService更新c对象 首先判断是否有上传图片，如果有上传，那么通过session获取ControllerContext,再通过getRealPath定位存放分类图片的路径。 根据分类id创建文件名 通过UploadedImageFile 把浏览器传递过来的图片保存在上述指定的位置 通过ImageUtil.change2jpg(file); 确保图片格式一定是jpg，而不仅仅是后缀名是jpg. 客户端跳转到admin_category_list12345678910111213@RequestMapping(&quot;admin_category_update&quot;)public String update(Category c, HttpSession session, UploadedImageFile uploadedImageFile) throws IOException &#123; categoryService.update(c); MultipartFile image = uploadedImageFile.getImage(); if(null!=image &amp;&amp;!image.isEmpty())&#123; File imageFolder= new File(session.getServletContext().getRealPath(&quot;img/category&quot;)); File file = new File(imageFolder,c.getId()+&quot;.jpg&quot;); image.transferTo(file); BufferedImage img = ImageUtil.change2jpg(file); ImageIO.write(img, &quot;jpg&quot;, file); &#125; return &quot;redirect:/admin_category_list&quot;;&#125;","tags":[{"name":"SSM商城","slug":"SSM商城","permalink":"http://yoursite.com/tags/SSM商城/"}]},{"title":"MYBATIS basic operation","date":"2018-01-23T01:43:16.000Z","path":"2018/01/23/MYBATIS-basic-operation/","text":"MyBatis is an open source, lightweight, persistence framework. It automates the mapping between SQL databases and objects in Java. The mappings are decoupled from the application logic by packaging the SQL statements in XML configuration files. configure the details of the database123456789101112131415161718192021222324&lt;?xml version = &quot;1.0&quot; encoding = &quot;UTF-8&quot;?&gt;&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt; &lt;environments default = &quot;development&quot;&gt; &lt;environment id = &quot;development&quot;&gt; &lt;transactionManager type = &quot;JDBC&quot;/&gt; &lt;dataSource type = &quot;POOLED&quot;&gt; &lt;property name = &quot;driver&quot; value = &quot;com.mysql.jdbc.Driver&quot;/&gt; &lt;property name = &quot;url&quot; value = &quot;jdbc:mysql://localhost:3306/details&quot;/&gt; &lt;property name = &quot;username&quot; value = &quot;root&quot;/&gt; &lt;property name = &quot;password&quot; value = &quot;password&quot;/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;mappers&gt; &lt;mapper resource = &quot;mybatis/Student.xml&quot;/&gt; &lt;/mappers&gt; &lt;/configuration&gt; The POJO class12345678910public class Student &#123; private int id; private String name; private String branch; private int percentage; private int phone; private String email; //Setters and getters &#125; Mapped StatementsMapped SQL statements are resided within the element named . This element contains an attribute called ‘namespace’: 123&lt;mapper namespace = &quot;Student&quot;&gt; //mapped statements and result maps&lt;mapper&gt; id is unique identifier used to identify the insert statement. On the other hand, parametertype is the class name or the alias of the parameter that will be passed into the statement: 123456789101112&lt;insert id = &quot;insert&quot; parameterType = &quot;Student&quot;&gt; INSERT INTO STUDENT1 (NAME, BRANCH, PERCENTAGE, PHONE, EMAIL ) VALUES (#&#123;name&#125;, #&#123;branch&#125;, #&#123;percentage&#125;, #&#123;phone&#125;, #&#123;email&#125;); &lt;/insert&gt;&lt;update id = &quot;update&quot; parameterType = &quot;Student&quot;&gt; UPDATE STUDENT SET EMAIL = #&#123;email&#125;, NAME = #&#123;name&#125;, BRANCH = #&#123;branch&#125;, PERCENTAGE = #&#123;percentage&#125;, PHONE = #&#123;phone&#125; WHERE ID = #&#123;id&#125;;&lt;/update&gt;&lt;delete id = &quot;deleteById&quot; parameterType = &quot;int&quot;&gt; DELETE from STUDENT WHERE ID = #&#123;id&#125;;&lt;/delete&gt; invoke the ‘insert’ mapped query: 1234//Assume session is an SqlSession object. session.insert(&quot;Student.insert&quot;, student);session.update(&quot;Student.update&quot;,student);session.delete(&quot;Student.deleteById&quot;, 18); resultMapsmaps the results of the select queries to the Student class 12345678910111213141516&lt;resultMap id = &quot;result&quot; type = &quot;Student&quot;&gt; &lt;result property = &quot;id&quot; column = &quot;ID&quot;/&gt; &lt;result property = &quot;name&quot; column = &quot;NAME&quot;/&gt; &lt;result property = &quot;branch&quot; column = &quot;BRANCH&quot;/&gt; &lt;result property = &quot;percentage&quot; column = &quot;PERCENTAGE&quot;/&gt; &lt;result property = &quot;phone&quot; column = &quot;PHONE&quot;/&gt; &lt;result property = &quot;email&quot; column = &quot;EMAIL&quot;/&gt;&lt;/resultMap&gt;&lt;select id = &quot;getAll&quot; resultMap = &quot;result&quot;&gt; SELECT * FROM STUDENT; &lt;/select&gt;&lt;select id = &quot;getById&quot; parameterType = &quot;int&quot; resultMap = &quot;result&quot;&gt; SELECT * FROM STUDENT WHERE ID = #&#123;id&#125;;&lt;/select&gt; The method returns the data of the selected record in the form of List: 1List&lt;Student&gt; list = session.selectList(&quot;Student.getAll&quot;);","tags":[{"name":"MYBATIS","slug":"MYBATIS","permalink":"http://yoursite.com/tags/MYBATIS/"}]},{"title":"MYBATIS Dynamic SQL","date":"2018-01-23T01:41:51.000Z","path":"2018/01/23/MYBATIS-Dynamic-SQL/","text":"MYBATIS Dynamic SQLDynamic SQL is a very powerful feature of MyBatis. It enables to build queries based on the scenario dynamically. if choose (when, otherwise) trim (where, set) foreachThe if StatementThis statement provides an optional text search type of functionality. 1234567891011&lt;select id = &quot;getRecByName_Id&quot; parameterType = &quot;Student&quot; resultType = &quot;Student&quot;&gt; SELECT * FROM STUDENT &lt;if test = &quot;name != null&quot;&gt; WHERE name LIKE #&#123;name&#125; &lt;/if&gt; &lt;if test = &quot;id != null&quot;&gt; AND id LIKE #&#123;id&#125; &lt;/if&gt; &lt;/select&gt; The choose, when, and otherwise Statementsa choose element, which is similar to Java’s switch statement. 1234567891011121314&lt;select id = &quot;getName_Id_phone&quot; parameterType = &quot;Student&quot; resultType = &quot;Student&quot;&gt; SELECT * FROM STUDENT &lt;where&gt; &lt;if test = &quot;id != null&quot;&gt; id = #&#123;id&#125; &lt;/if&gt; &lt;if test = &quot;name != null&quot;&gt; AND name LIKE #&#123;name&#125; &lt;/if&gt; &lt;/where&gt; &lt;/select&gt; The foreach Statementforeach element allows you to specify a collection and declare item and index variables that can be used inside the body of the element 1234567891011&lt;select id = &quot;selectPostIn&quot; resultType = &quot;domain.blog.Post&quot;&gt; SELECT * FROM POST P WHERE ID in &lt;foreach item = &quot;item&quot; index = &quot;index&quot; collection = &quot;list&quot; open = &quot;(&quot; separator = &quot;,&quot; close = &quot;)&quot;&gt; #&#123;item&#125; &lt;/foreach&gt; &lt;/select&gt;","tags":[{"name":"MYBATIS","slug":"MYBATIS","permalink":"http://yoursite.com/tags/MYBATIS/"}]},{"title":"SSM 类别增加","date":"2018-01-23T01:40:09.316Z","path":"2018/01/23/SSM-类别增加/","text":"页面中的增加分类部分1234567891011121314151617181920212223&lt;div class=&quot;panel panel-warning addDiv&quot;&gt; &lt;div class=&quot;panel-heading&quot;&gt;新增分类&lt;/div&gt; &lt;div class=&quot;panel-body&quot;&gt; &lt;form method=&quot;post&quot; id=&quot;addForm&quot; action=&quot;admin_category_add&quot; enctype=&quot;multipart/form-data&quot;&gt; &lt;table class=&quot;addTable&quot;&gt; &lt;tr&gt; &lt;td&gt;分类名称&lt;/td&gt; &lt;td&gt;&lt;input id=&quot;name&quot; name=&quot;name&quot; type=&quot;text&quot; class=&quot;form-control&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;分类圖片&lt;/td&gt; &lt;td&gt; &lt;input id=&quot;categoryPic&quot; accept=&quot;image/*&quot; type=&quot;file&quot; name=&quot;image&quot; /&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr class=&quot;submitTR&quot;&gt; &lt;td colspan=&quot;2&quot; align=&quot;center&quot;&gt; &lt;button type=&quot;submit&quot; class=&quot;btn btn-success&quot;&gt;提 交&lt;/button&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/form&gt; &lt;/div&gt; 为空判断12345678910111213&lt;script&gt;$(function()&#123; $(&quot;#addForm&quot;).submit(function()&#123; if(!checkEmpty(&quot;name&quot;,&quot;分类名称&quot;)) return false; if(!checkEmpty(&quot;categoryPic&quot;,&quot;分类图片&quot;)) return false; return true; &#125;);&#125;); &lt;/script&gt; 在CategoryMapper.xml中新增加 插入分类的SQL语句需要加上2个属性：keyProperty=”id” useGeneratedKeys=”true” 以确保Category对象通过mybatis增加到数据库之后得到的id增长值会被设置在Category对象上。 因为在保存分类图片的时候需要用到这个id值，所以这一步是必须的。 1234567891011121314151617181920&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.how2java.tmall.mapper.CategoryMapper&quot;&gt; &lt;select id=&quot;list&quot; resultType=&quot;Category&quot;&gt; select * from category order by id desc &lt;if test=&quot;start!=null and count!=null&quot;&gt; limit #&#123;start&#125;,#&#123;count&#125; &lt;/if&gt; &lt;/select&gt; &lt;select id=&quot;total&quot; resultType=&quot;int&quot;&gt; select count(*) from category &lt;/select&gt; &lt;insert id=&quot;add&quot; keyProperty=&quot;id&quot; useGeneratedKeys=&quot;true&quot; parameterType=&quot;Category&quot; &gt; insert into category ( name ) values (#&#123;name&#125;) &lt;/insert&gt;&lt;/mapper&gt; 在CategoryMapper中新增add方法123456789import java.util.List; public interface CategoryMapper &#123; List&lt;Category&gt; list(Page page); int total(); void add(Category category);&#125; CategoryService123456789import java.util.List; public interface CategoryService&#123; int total(); List&lt;Category&gt; list(Page page); void add(Category category); &#125; CategoryServiceImpl12345678910111213141516171819202122import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.List;@Servicepublic class CategoryServiceImpl implements CategoryService &#123; @Autowired CategoryMapper categoryMapper; @Override public List&lt;Category&gt; list(Page page) &#123; return categoryMapper.list(page); &#125; @Override public int total() &#123; return categoryMapper.total(); &#125; @Override public void add(Category category) &#123; categoryMapper.add(category); &#125;&#125; 新增UploadedImageFile ，其中有一个MultipartFile 类型的属性，用于接受上传文件的注入属性名称image必须和页面中的增加分类部分中的type=”file”的name值保持一致 1234567891011121314import org.springframework.web.multipart.MultipartFile; public class UploadedImageFile &#123; MultipartFile image; public MultipartFile getImage() &#123; return image; &#125; public void setImage(MultipartFile image) &#123; this.image = image; &#125; &#125; ImageUtil 工具类 change2jpg 确保图片文件的二进制格式是jpg。 resizeImage用于改变图片大小，在上传产品图片的时候会用到。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566import java.awt.Image;import java.awt.Toolkit;import java.awt.image.BufferedImage;import java.awt.image.ColorModel;import java.awt.image.DataBuffer;import java.awt.image.DataBufferInt;import java.awt.image.DirectColorModel;import java.awt.image.PixelGrabber;import java.awt.image.Raster;import java.awt.image.RenderedImage;import java.awt.image.WritableRaster;import java.io.File;import java.io.IOException; import javax.imageio.ImageIO; public class ImageUtil &#123; public static BufferedImage change2jpg(File f) &#123; try &#123; Image i = Toolkit.getDefaultToolkit().createImage(f.getAbsolutePath()); PixelGrabber pg = new PixelGrabber(i, 0, 0, -1, -1, true); pg.grabPixels(); int width = pg.getWidth(), height = pg.getHeight(); final int[] RGB_MASKS = &#123; 0xFF0000, 0xFF00, 0xFF &#125;; final ColorModel RGB_OPAQUE = new DirectColorModel(32, RGB_MASKS[0], RGB_MASKS[1], RGB_MASKS[2]); DataBuffer buffer = new DataBufferInt((int[]) pg.getPixels(), pg.getWidth() * pg.getHeight()); WritableRaster raster = Raster.createPackedRaster(buffer, width, height, width, RGB_MASKS, null); BufferedImage img = new BufferedImage(RGB_OPAQUE, raster, false, null); return img; &#125; catch (InterruptedException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); return null; &#125; &#125; public static void resizeImage(File srcFile, int width,int height, File destFile) &#123; try &#123; if(!destFile.getParentFile().exists()) destFile.getParentFile().mkdirs(); Image i = ImageIO.read(srcFile); i = resizeImage(i, width, height); ImageIO.write((RenderedImage) i, &quot;jpg&quot;, destFile); &#125; catch (IOException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125; public static Image resizeImage(Image srcImage, int width, int height) &#123; try &#123; BufferedImage buffImg = null; buffImg = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB); buffImg.getGraphics().drawImage(srcImage.getScaledInstance(width, height, Image.SCALE_SMOOTH), 0, 0, null); return buffImg; &#125; catch (Exception e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; return null; &#125; &#125; CategoryController新增add方法 add方法映射路径admin_category_add的访问 通过categoryService保存c对象 通过session获取ControllerContext,再通过getRealPath定位存放分类图片的路径。如果严格按照本教程的做法，使用idea中的tomcat部署的话，那么图片就会存放在:E:\\project\\tmall_ssm\\target\\tmall_ssm\\img\\category 这里 根据分类id创建文件名 如果/img/category目录不存在，则创建该目录，否则后续保存浏览器传过来图片，会提示无法保存 通过UploadedImageFile 把浏览器传递过来的图片保存在上述指定的位置 通过ImageUtil.change2jpg(file); 确保图片格式一定是jpg，而不仅仅是后缀名是jpg. 客户端跳转到admin_category_list 123456789101112@RequestMapping(&quot;admin_category_add&quot;)public String add(Category c, HttpSession session, UploadedImageFile uploadedImageFile) throws IOException &#123; categoryService.add(c); File imageFolder= new File(session.getServletContext().getRealPath(&quot;img/category&quot;)); File file = new File(imageFolder,c.getId()+&quot;.jpg&quot;); if(!file.getParentFile().exists()) file.getParentFile().mkdirs(); uploadedImageFile.getImage().transferTo(file); BufferedImage img = ImageUtil.change2jpg(file); ImageIO.write(img, &quot;jpg&quot;, file); return &quot;redirect:/admin_category_list&quot;;&#125;","tags":[{"name":"SSM商城","slug":"SSM商城","permalink":"http://yoursite.com/tags/SSM商城/"}]},{"title":"商城框架搭建","date":"2018-01-23T01:37:19.281Z","path":"2018/01/23/商城框架搭建/","text":"实体类，声明了id和name,以及对应的setter,getter123456789101112131415161718192021public class Category &#123; private Integer id; private String name; public Integer getId() &#123; return id; &#125; public void setId(Integer id) &#123; this.id = id; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name == null ? null : name.trim(); &#125;&#125; 创建接口CategoryMapper，声明list方法12345import java.util.List; public interface CategoryMapper &#123; List&lt;Category&gt; list();&#125; 创建接口CategoryService，声明list方法1234import java.util.List;public interface CategoryService&#123; List&lt;Category&gt; list();&#125; 创建CategoryService接口的实现类CategoryServiceImpl123456789101112import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.List;@Servicepublic class CategoryServiceImpl implements CategoryService &#123; @Autowired CategoryMapper categoryMapper; public List&lt;Category&gt; list()&#123; return categoryMapper.list(); &#125;; &#125; 创建访问控制器CategoryController1234567891011121314151617181920import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.RequestMapping; import java.util.List;@Controller@RequestMapping(&quot;&quot;)public class CategoryController &#123; @Autowired CategoryService categoryService; @RequestMapping(&quot;admin_category_list&quot;) public String list(Model model)&#123; List&lt;Category&gt; cs= categoryService.list(); model.addAttribute(&quot;cs&quot;, cs); return &quot;admin/listCategory&quot;; &#125;&#125; 创建映射文件CategoryMapper.xml12345678910&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.how2java.tmall.mapper.CategoryMapper&quot;&gt; &lt;select id=&quot;list&quot; resultType=&quot;Category&quot;&gt; select * from category order by id desc &lt;/select&gt;&lt;/mapper&gt; 创建log4j.properties，开启日志12345678# Global logging configurationlog4j.rootLogger=ERROR, stdout# MyBatis logging configuration...log4j.logger.com.how2java.tmall=TRACE# Console output...log4j.appender.stdout=org.apache.log4j.ConsoleAppenderlog4j.appender.stdout.layout=org.apache.log4j.PatternLayoutlog4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n 在resources目录下新建jdbc.properties，配置数据库信息12345#数据库配置文件jdbc.driver=com.mysql.jdbc.Driverjdbc.url=jdbc:mysql://localhost:3306/ssm?useUnicode=true&amp;characterEncoding=utf8jdbc.username=rootjdbc.password=admin 在resources目录下新建applicationContext.xml123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;&gt; &lt;!-- 启动对注解的识别 --&gt; &lt;context:annotation-config /&gt; &lt;context:component-scan base-package=&quot;com.service&quot; /&gt; &lt;!-- 导入数据库配置文件 --&gt; &lt;context:property-placeholder location=&quot;classpath:jdbc.properties&quot;/&gt; &lt;!-- 配置数据库连接池 --&gt; &lt;bean id=&quot;dataSource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot; init-method=&quot;init&quot; destroy-method=&quot;close&quot;&gt; &lt;!-- 基本属性 url、user、password --&gt; &lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot; /&gt; &lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot; /&gt; &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot; /&gt; &lt;!-- 配置初始化大小、最小、最大 --&gt; &lt;property name=&quot;initialSize&quot; value=&quot;1&quot; /&gt; &lt;property name=&quot;minIdle&quot; value=&quot;1&quot; /&gt; &lt;property name=&quot;maxActive&quot; value=&quot;20&quot; /&gt; &lt;!-- 配置获取连接等待超时的时间 --&gt; &lt;property name=&quot;maxWait&quot; value=&quot;60000&quot; /&gt; &lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt; &lt;property name=&quot;timeBetweenEvictionRunsMillis&quot; value=&quot;60000&quot; /&gt; &lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt; &lt;property name=&quot;minEvictableIdleTimeMillis&quot; value=&quot;300000&quot; /&gt; &lt;property name=&quot;validationQuery&quot; value=&quot;SELECT 1&quot; /&gt; &lt;property name=&quot;testWhileIdle&quot; value=&quot;true&quot; /&gt; &lt;property name=&quot;testOnBorrow&quot; value=&quot;false&quot; /&gt; &lt;property name=&quot;testOnReturn&quot; value=&quot;false&quot; /&gt; &lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 --&gt; &lt;property name=&quot;poolPreparedStatements&quot; value=&quot;true&quot; /&gt; &lt;property name=&quot;maxPoolPreparedStatementPerConnectionSize&quot; value=&quot;20&quot; /&gt; &lt;/bean&gt; &lt;!--Mybatis的SessionFactory配置--&gt; &lt;bean id=&quot;sqlSession&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt; &lt;property name=&quot;typeAliasesPackage&quot; value=&quot;com.pojo&quot; /&gt; &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt; &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:mapper/*.xml&quot;/&gt; &lt;!--分页插件，目前先注释，后面重构的时候才会使用 &lt;property name=&quot;plugins&quot;&gt; &lt;array&gt; &lt;bean class=&quot;com.github.pagehelper.PageInterceptor&quot;&gt; &lt;property name=&quot;properties&quot;&gt; &lt;value&gt; &lt;/value&gt; &lt;/property&gt; &lt;/bean&gt; &lt;/array&gt; &lt;/property&gt; --&gt; &lt;/bean&gt; &lt;!--Mybatis的Mapper文件识别--&gt; &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt; &lt;property name=&quot;basePackage&quot; value=&quot;com.mapper&quot;/&gt; &lt;/bean&gt; &lt;/beans&gt; 在resources目录下新建springMVC.xml12345678910111213141516171819202122232425262728293031323334&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd&quot;&gt; &lt;!--启动注解识别--&gt; &lt;context:annotation-config/&gt; &lt;context:component-scan base-package=&quot;com.controller&quot;&gt; &lt;context:include-filter type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.Controller&quot;/&gt; &lt;/context:component-scan&gt; &lt;mvc:annotation-driven /&gt; &lt;!--开通静态资源的访问--&gt; &lt;mvc:default-servlet-handler /&gt; &lt;!-- 视图定位 --&gt; &lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt; &lt;property name=&quot;viewClass&quot; value=&quot;org.springframework.web.servlet.view.JstlView&quot; /&gt; &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot; /&gt; &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot; /&gt; &lt;/bean&gt; &lt;!-- 对上传文件的解析--&gt; &lt;bean id=&quot;multipartResolver&quot; class=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;/&gt;&lt;/beans&gt; 更改web.xml12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot; version=&quot;2.5&quot;&gt; &lt;!-- spring的配置文件--&gt; &lt;context-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt; &lt;/context-param&gt; &lt;listener&gt; &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt; &lt;/listener&gt; &lt;!--中文过滤器--&gt; &lt;filter&gt; &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt; &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt; &lt;init-param&gt; &lt;param-name&gt;encoding&lt;/param-name&gt; &lt;param-value&gt;utf-8&lt;/param-value&gt; &lt;/init-param&gt; &lt;/filter&gt; &lt;filter-mapping&gt; &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt; &lt;/filter-mapping&gt; &lt;!-- spring mvc核心：分发servlet --&gt; &lt;servlet&gt; &lt;servlet-name&gt;mvc-dispatcher&lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;!-- spring mvc的配置文件 --&gt; &lt;init-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:springMVC.xml&lt;/param-value&gt; &lt;/init-param&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;mvc-dispatcher&lt;/servlet-name&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; &lt;/web-app&gt; 在jsp目录中创建admin目录，接着创建listCategory.jsp文件1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot; import=&quot;java.util.*&quot;%&gt; &lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot;%&gt;&lt;%@include file=&quot;../include/admin/adminHeader.jsp&quot;%&gt;&lt;%@include file=&quot;../include/admin/adminNavigator.jsp&quot;%&gt; &lt;script&gt;$(function()&#123; $(&quot;#addForm&quot;).submit(function()&#123; if(!checkEmpty(&quot;name&quot;,&quot;分类名称&quot;)) return false; if(!checkEmpty(&quot;categoryPic&quot;,&quot;分类图片&quot;)) return false; return true; &#125;);&#125;); &lt;/script&gt; &lt;title&gt;分类管理&lt;/title&gt; &lt;div class=&quot;workingArea&quot;&gt; &lt;h1 class=&quot;label label-info&quot; &gt;分类管理&lt;/h1&gt; &lt;br&gt; &lt;br&gt; &lt;div class=&quot;listDataTableDiv&quot;&gt; &lt;table class=&quot;table table-striped table-bordered table-hover table-condensed&quot;&gt; &lt;thead&gt; &lt;tr class=&quot;success&quot;&gt; &lt;th&gt;ID&lt;/th&gt; &lt;th&gt;图片&lt;/th&gt; &lt;th&gt;分类名称&lt;/th&gt; &lt;th&gt;属性管理&lt;/th&gt; &lt;th&gt;产品管理&lt;/th&gt; &lt;th&gt;编辑&lt;/th&gt; &lt;th&gt;删除&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;c:forEach items=&quot;$&#123;cs&#125;&quot; var=&quot;c&quot;&gt; &lt;tr&gt; &lt;td&gt;$&#123;c.id&#125;&lt;/td&gt; &lt;td&gt;&lt;img height=&quot;40px&quot; src=&quot;img/category/$&#123;c.id&#125;.jpg&quot;&gt;&lt;/td&gt; &lt;td&gt;$&#123;c.name&#125;&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;admin_property_list?cid=$&#123;c.id&#125;&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-th-list&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;admin_product_list?cid=$&#123;c.id&#125;&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-shopping-cart&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;admin_category_edit?id=$&#123;c.id&#125;&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-edit&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;a deleteLink=&quot;true&quot; href=&quot;admin_category_delete?id=$&#123;c.id&#125;&quot;&gt;&lt;span class=&quot; glyphicon glyphicon-trash&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/c:forEach&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;div class=&quot;pageDiv&quot;&gt; &lt;%//@include file=&quot;../include/admin/adminPage.jsp&quot; %&gt; &lt;/div&gt; &lt;div class=&quot;panel panel-warning addDiv&quot;&gt; &lt;div class=&quot;panel-heading&quot;&gt;新增分类&lt;/div&gt; &lt;div class=&quot;panel-body&quot;&gt; &lt;form method=&quot;post&quot; id=&quot;addForm&quot; action=&quot;admin_category_add&quot; enctype=&quot;multipart/form-data&quot;&gt; &lt;table class=&quot;addTable&quot;&gt; &lt;tr&gt; &lt;td&gt;分类名称&lt;/td&gt; &lt;td&gt;&lt;input id=&quot;name&quot; name=&quot;name&quot; type=&quot;text&quot; class=&quot;form-control&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;分类圖片&lt;/td&gt; &lt;td&gt; &lt;input id=&quot;categoryPic&quot; accept=&quot;image/*&quot; type=&quot;file&quot; name=&quot;image&quot; /&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr class=&quot;submitTR&quot;&gt; &lt;td colspan=&quot;2&quot; align=&quot;center&quot;&gt; &lt;button type=&quot;submit&quot; class=&quot;btn btn-success&quot;&gt;提 交&lt;/button&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;%@include file=&quot;../include/admin/adminFooter.jsp&quot;%&gt;","tags":[{"name":"SSM商城","slug":"SSM商城","permalink":"http://yoursite.com/tags/SSM商城/"}]},{"title":"Java工具类","date":"2018-01-17T11:59:02.416Z","path":"2018/01/17/Java工具类/","text":"日期工具类字符串与日期的转换： 123456789101112131415161718192021222324252627282930import java.text.SimpleDateFormat;import java.util.Date;public class DateUtil &#123; //日期转字符 public static String formatDate(Date date,String format)&#123; String result=&quot;&quot;; SimpleDateFormat sdf=new SimpleDateFormat(format); if(date!=null)&#123; result=sdf.format(date); &#125; return result; &#125; //字符转日期 public static Date formatString(String str,String format) throws Exception&#123; if(StringUtil.isEmpty(str))&#123; return null; &#125; SimpleDateFormat sdf=new SimpleDateFormat(format); return sdf.parse(str); &#125; //获取当前时间 public static String getCurrentDateStr()throws Exception&#123; Date date=new Date(); SimpleDateFormat sdf=new SimpleDateFormat(&quot;yyyyMMddhhmmss&quot;); return sdf.format(date); &#125;&#125; 数据库连接工具类1234567891011121314151617public class DbUtil &#123; //获得连接 public Connection getCon() throws Exception&#123; Class.forName(PropertiesUtil.getValue(&quot;jdbcName&quot;)); Connection con=DriverManager.getConnection(PropertiesUtil.getValue(&quot;dbUrl&quot;), PropertiesUtil.getValue(&quot;dbUserName&quot;), PropertiesUtil.getValue(&quot;dbPassword&quot;)); return con; &#125; //关闭连接 public void closeCon(Connection con)throws Exception&#123; if(con!=null)&#123; con.close(); &#125; &#125; &#125; 加密工具类12345678public class MD5Util &#123; public static String EncoderPwdByMd5(String str) throws NoSuchAlgorithmException, UnsupportedEncodingException&#123; MessageDigest md5=MessageDigest.getInstance(&quot;MD5&quot;); BASE64Encoder base64en=new BASE64Encoder(); return base64en.encode(md5.digest(str.getBytes(&quot;utf-8&quot;))); &#125;&#125; 读取配置文件1234567891011121314public class PropertiesUtil &#123; public static String getValue(String key)&#123; Properties prop=new Properties(); InputStream in=new PropertiesUtil().getClass().getResourceAsStream(&quot;/setting.properties&quot;); try &#123; prop.load(in); &#125; catch (IOException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; return (String)prop.get(key); &#125;&#125; 字符串工具类1234567891011121314151617181920212223242526public class StringUtil &#123; public static boolean isEmpty(String str)&#123; if(str==null || &quot;&quot;.equals(str.trim()))&#123; return true; &#125;else&#123; return false; &#125; &#125; public static boolean isNotEmpty(String str)&#123; if(str!=null &amp;&amp; !&quot;&quot;.equals(str.trim()))&#123; return true; &#125;else&#123; return false; &#125; &#125; public static String formatLike(String str)&#123; if(isNotEmpty(str))&#123; return &quot;%&quot;+str+&quot;%&quot;; &#125;else&#123; return null; &#125; &#125;&#125;","tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"}]},{"title":"Mysql select statement","date":"2018-01-17T11:56:48.632Z","path":"2018/01/17/Mysql-select-statement/","text":"select statement可以从表或视图中查询数据 syntax of the SELECT statement: 1234567891011SELECT column_1, column_2, ...FROM table_1[INNER | LEFT |RIGHT] JOIN table_2 ON conditionsWHERE conditionsGROUP BY column_1HAVING group_conditionsORDER BY column_1LIMIT offset, length; SELECT statement examples： 1234SELECTlastname,firstname,jobtype FROMemployees; 1SELECT * FROM employees; MySQL DISTINCT clause123456SELECT DISTINCT columnsFROM table_nameWHERE where_conditions; MySQL DISTINCT example: 12345SELECT DISTINCTlastname FROMemployeesORDER BY lastname; If a column has NULL values and you use the DISTINCT clause for that column, MySQL keeps one NULL value and eliminates the other. use the DISTINCT clause with more than one column. In this case, MySQL uses the combination of all columns to determine the uniqueness of the row in the result set. 1234567SELECT DISTINCT state, cityFROM customersWHERE state IS NOT NULLORDER BY state , city; use the GROUP BY clause in the SELECT statement without using aggregate functions, the GROUP BY clause behaves like the DISTINCT clause. 123456SELECT stateFROM customersGROUP BY state; use the DISTINCT clause with an aggregate function e.g., SUM, AVG, and COUNT, to remove duplicate rows before MySQL applies the aggregate function to the result set. 123456SELECT COUNT(DISTINCT state)FROM customersWHERE country = &apos;USA&apos;; use the DISTINCT clause with the LIMIT clause, MySQL stops searching immediately when it finds the number of unique rows specified in the LIMIT clause 1234567SELECT DISTINCT stateFROM customersWHERE state IS NOT NULLLIMIT 5; WHERE clauseuse WHERE clause to specify exact rows to select based on particular filter express or condition 123456SELECT lastname,firstname,jobtypeFROM employeesWHERE jobtype=&apos;Sales Rep&apos; AND officeCode = 1; the comparison operators that can use to form filtering expressions in the WHERE clause. Operator Description = Equal to. You can use it with almost any data types. &lt;&gt; or != Not equal to. &lt; Less than. You typically use it with numeric and date/time data types. &gt; Greater than. &lt;= Less than or equal to &gt;= Greater than or equal to Note: some useful operators that you can use in the WHERE clause to form complex conditions:BETWEEN,LIKE,IN,IS NULL. The WHERE clause is used not only with the SELECT statement but also other SQL statements to filter rows such as DELETE and UPDATE.ORDER BY clauseuse the ORDER BY clause to sort the result set 123SELECT column1, column2,...FROM tblORDER BY column1 [ASC|DESC], column2 [ASC|DESC],... ORDER BY sort by an expression example: 12345678910SELECT ordernumber, orderlinenumber, quantityOrdered * priceEach AS subtotalFROM orderdetailsORDER BY ordernumber, orderLineNumber, subtotal; ORDER BY with customer sort order:define custom sort order use FIELD() function 1234567891011SELECT orderNumber, statusFROM ordersORDER BY FIELD(status, &apos;In Process&apos;, &apos;On Hold&apos;, &apos;Cancelled&apos;, &apos;Resolved&apos;, &apos;Disputed&apos;, &apos;Shipped&apos;); Natural Sorting with ORDER BY Clause: 123456SELECT item_noFROM itemsORDER BY CAST(item_no AS UNSIGNED) , item_no; the LENGTH function returns the length of a string12345SELECT item_noFROM itemsORDER BY LENGTH(item_no) , item_no; use the parentheses statement returns the customers who locate in the USA or France and have credit limit greater than 10000: 1234567SELECT customername, country, creditLimitFROM customersWHERE (country = &apos;USA&apos; OR country = &apos;France&apos;) AND creditlimit &gt; 100000; IN OperatorThe IN operator allows you to determine if a specified value matches any one of a list or a subquery: 123456SELECT column1,column2,...FROM table_nameWHERE (expr|column_1) IN (&apos;value1&apos;,&apos;value2&apos;,...); find out the offices that locate in the U.S. and France: 123456SELECT officeCode, city, phone, countryFROM officesWHERE country IN (&apos;USA&apos; , &apos;France&apos;); get offices that do not locate in USA and France, you use NOT IN in the WHERE clause: 123456SELECT officeCode, city, phoneFROM officesWHERE country NOT IN (&apos;USA&apos; , &apos;France&apos;); MySQL IN with subquery: 1234567891011SELECT orderNumber, customerNumber, status, shippedDateFROM ordersWHERE orderNumber IN (SELECT orderNumber FROM orderDetails GROUP BY orderNumber HAVING SUM(quantityOrdered * priceEach) &gt; 60000); BETWEEN Operatoruse the BETWEEN operator in the WHERE clause of the SELECT, INSERT, UPDATE, and DELETE statements: 1expr [NOT] BETWEEN begin_expr AND end_expr; find products whose buy prices are within the ranges of $90 and $100: 123456SELECT productCode, productName, buyPriceFROM productsWHERE buyPrice BETWEEN 90 AND 100; get the orders whose required dates are from 01/01/2003 to 01/31/2003: 1234567SELECT orderNumber, requiredDate, statusFROM ordersWHERE requireddate BETWEEN CAST(&apos;2003-01-01&apos; AS DATE) AND CAST(&apos;2003-01-31&apos; AS DATE);","tags":[{"name":"Mysql","slug":"Mysql","permalink":"http://yoursite.com/tags/Mysql/"}]},{"title":"林夕语录","date":"2018-01-02T02:53:47.000Z","path":"2018/01/02/林夕语录/","text":"让我感谢你，赠我空欢喜。 喜悦出于巧合，眼泪何必固执。 与你淡似水,便千杯不醉。 不错过任何挑逗，也不为任何人停留。 你在我旁边 只打了个照面 五月的晴天 闪了电。 就像蝴蝶飞不过沧海，没有谁忍心责怪。 害怕悲剧重演 我的命中命中越美丽的东西我越不可碰。 往事纵不如烟，但时间会把当年的大事缩小，变成哭笑不得的小插曲 没明白么,在乎什么,败在什么。 但知识易得，智慧难求。 要多坚强，才敢念念不忘。 我们都是风雪夜中的赶路人，因相遇摩擦，融化了彼此肩头的雪花，而后因为各自的路线不同，相距越来越远，雪花再覆肩头。 彼岸，没有灯塔，我，依然，张望着。 心灰了还未碎，心死了还在醉。 感谢永远有歌，把心境道破。 总要为想爱的人不想活，才跟该爱的人生活。 我唱出心里话时，眼泪会流，要是怕难过，抱住我手。 当世事再没完美，可远在岁月如歌中找你。","tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}]},{"title":"在路上","date":"2017-12-15T11:32:35.000Z","path":"2017/12/15/在路上/","text":"","tags":[{"name":"游走","slug":"游走","permalink":"http://yoursite.com/tags/游走/"}]},{"title":"hello there","date":"2017-01-15T11:31:08.000Z","path":"2017/01/15/hello-there/","text":"你好这是我的第一篇文章:)","tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}]},{"title":"Hello World","date":"2017-01-15T10:10:05.845Z","path":"2017/01/15/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]